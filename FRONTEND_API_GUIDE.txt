===============================================================================
                    RESTAURANT BACKEND API GUIDE FOR FRONTEND
===============================================================================

BASE URL: http://127.0.0.1:8000/api

===============================================================================
                              AUTHENTICATION
===============================================================================

The API uses JWT (JSON Web Token) authentication. After login/registration, 
include the access token in all protected requests:

Header: Authorization: Bearer <access_token>

Token expires in 60 minutes. Use refresh token to get new access token.

===============================================================================
                            DATABASE STRUCTURE
===============================================================================

1. USER MODEL (auth_app.User)
   Fields available in API responses:
   - id: integer (primary key)
   - username: string (max 150 chars)
   - email: string (unique, used for login)
   - first_name: string (max 150 chars)
   - last_name: string (max 150 chars)
   - date_created: datetime (ISO format)
   - is_staff: boolean (admin status)
   - is_active: boolean

2. MENU ITEM MODEL (restaurant_server.MenuItem)
   Fields available in API responses:
   - id: integer (primary key)
   - food_image: string (image URL, can be null)
   - food_name: string (max 100 chars)
   - food_description: text
   - food_price: float (minimum 0.01)
   - created_at: datetime (ISO format)
   - updated_at: datetime (ISO format)
   - is_available: boolean

3. ORDER HISTORY MODEL (restaurant_server.OrderHistory)
   Fields available in API responses:
   - id: integer (primary key)
   - user: object (User details)
   - order_date: datetime (ISO format)
   - total_amount: float
   - status: string (pending/confirmed/preparing/ready/delivered/cancelled)
   - special_instructions: text (can be null)
   - order_items: array of OrderItem objects

4. ORDER ITEM MODEL (restaurant_server.OrderItem)
   Fields available in API responses:
   - id: integer (primary key)
   - menu_item: object (MenuItem details)
   - quantity: integer (minimum 1)
   - price_at_time: float (price when ordered)

5. TABLE RESERVATION MODEL (restaurant_server.TableReservation)
   Fields available in API responses:
   - id: integer (primary key)
   - user: object (User details)
   - reservation_date: date (YYYY-MM-DD format)
   - reservation_time: time (HH:MM:SS format)
   - party_size: integer (1-20)
   - table_number: integer (can be null, assigned by admin)
   - special_requests: text (can be null)
   - status: string (pending/confirmed/seated/completed/cancelled/no_show)
   - created_at: datetime (ISO format)

6. REVIEW MODEL (restaurant_server.Review)
   Fields available in API responses:
   - id: integer (primary key)
   - user: object (User details)
   - order: object (OrderHistory details)
   - stars: integer (1-5)
   - description: text
   - created_at: datetime (ISO format)
   - updated_at: datetime (ISO format)

===============================================================================
                              API ENDPOINTS
===============================================================================

PUBLIC ENDPOINTS (No authentication required):
----------------------------------------------

1. USER REGISTRATION
   POST /api/auth/register/
   Request Body:
   {
     "username": "string",
     "email": "string",
     "password": "string",
     "password_confirm": "string"
   }
   Response: User object + JWT tokens

2. USER LOGIN
   POST /api/auth/login/
   Request Body:
   {
     "email": "string",
     "password": "string"
   }
   Response: User object + JWT tokens

3. MENU ITEMS LIST
   GET /api/menu/
   Response: Array of MenuItem objects (only available items)

4. REVIEWS LIST (Paginated)
   GET /api/reviews/
   Query Parameters: ?page=1&page_size=10
   Response: Paginated list of Review objects

PROTECTED ENDPOINTS (Authentication required):
----------------------------------------------

5. USER PROFILE
   GET /api/auth/profile/
   Response: Current user object

6. CREATE RESERVATION
   POST /api/reservation/
   Request Body:
   {
     "reservation_date": "YYYY-MM-DD",
     "reservation_time": "HH:MM:SS",
     "party_size": integer,
     "special_requests": "string (optional)"
   }
   Response: Created reservation object

7. USER RESERVATIONS
   GET /api/reservations/
   Response: Array of user's reservations

8. CREATE ORDER
   POST /api/order/
   Request Body:
   {
     "items": [
       {
         "menu_item_id": integer,
         "quantity": integer
       }
     ],
     "special_instructions": "string (optional)"
   }
   Response: Created order object with calculated total

9. USER ORDERS
   GET /api/orders/
   Response: Array of user's order history

10. CREATE REVIEW
    POST /api/review/
    Request Body:
    {
      "order_id": integer,
      "stars": integer (1-5),
      "description": "string"
    }
    Response: Created review object

ADMIN ENDPOINTS (Staff/Superuser only):
--------------------------------------

11. LIST ALL USERS
    GET /api/admin/users/
    Response: Array of all User objects

12. ADD MENU ITEM
    POST /api/admin/menu/
    Request Body (multipart/form-data for image upload):
    {
      "food_name": "string",
      "food_description": "string",
      "food_price": float,
      "food_image": file (optional),
      "is_available": boolean
    }
    Response: Created MenuItem object

13. LIST ALL MENU ITEMS
    GET /api/admin/menu/all/
    Response: Array of all MenuItem objects (including unavailable)

14. DELETE MENU ITEM
    DELETE /api/admin/menu/{id}/
    Response: Success message

15. LIST ALL REVIEWS
    GET /api/admin/reviews/
    Response: Array of all Review objects

16. DELETE REVIEW
    DELETE /api/admin/review/{id}/
    Response: Success message

===============================================================================
                           FRONTEND INTEGRATION TIPS
===============================================================================

1. TOKEN MANAGEMENT:
   - Store access_token in localStorage/sessionStorage
   - Store refresh_token securely
   - Implement automatic token refresh logic
   - Clear tokens on logout

2. ERROR HANDLING:
   - 401: Token expired/invalid - redirect to login
   - 403: Insufficient permissions
   - 400: Validation errors - show field-specific messages
   - 500: Server error - show generic error message

3. IMAGE HANDLING:
   - Menu item images: Use full URL from food_image field
   - Upload images: Use FormData for multipart requests

4. DATE/TIME FORMATTING:
   - API returns ISO format: "2025-07-06T14:10:55.123456Z"
   - Convert to local timezone for display
   - Send dates in YYYY-MM-DD format
   - Send times in HH:MM:SS format

5. PAGINATION:
   - Reviews endpoint supports pagination
   - Use ?page=1&page_size=10 parameters
   - Response includes: results, count, next, previous

6. ORDER FLOW:
   - Get menu items → Create order → View order history
   - Order total is calculated automatically on backend
   - Order status updates: pending → confirmed → preparing → ready → delivered

7. RESERVATION FLOW:
   - Check available dates/times (implement on frontend)
   - Create reservation → Admin assigns table → Status updates

===============================================================================
                              SAMPLE REQUESTS
===============================================================================

JavaScript Fetch Examples:

// Login
const loginResponse = await fetch('http://127.0.0.1:8000/api/auth/login/', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    email: 'user@example.com',
    password: 'password123'
  })
});

// Get menu (public)
const menuResponse = await fetch('http://127.0.0.1:8000/api/menu/');

// Create order (protected)
const orderResponse = await fetch('http://127.0.0.1:8000/api/order/', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${accessToken}`
  },
  body: JSON.stringify({
    items: [
      { menu_item_id: 1, quantity: 2 },
      { menu_item_id: 3, quantity: 1 }
    ],
    special_instructions: 'No onions please'
  })
});

===============================================================================
                                NOTES
===============================================================================

- All datetime fields are in UTC timezone
- All monetary values are in float format (e.g., 12.99)
- Image uploads require multipart/form-data content type
- Admin endpoints require is_staff=True or is_superuser=True
- Email is used as the login username field
- Password validation is enforced on registration

For testing, use the provided test_api.py script or tools like Postman.
